#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        scroll {
            bindings = <&none>;
            key-positions = <29 30>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        paste_reserch: paste_reserch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(C)>,
                <&macro_wait_time 200>,
                <&kp LG(T)>,
                <&macro_wait_time 200>,
                <&kp LG(V)>,
                <&macro_wait_time 200>,
                <&kp ENTER>,
                <&macro_press>;

            label = "PASTE_RESERCH";
        };
    };

    lt_to_layer_0: lt_to_layer_0 {
        compatible = "zmk,behavior-hold-tap";
        label = "LAYER_TAP_TO_0";
        bindings = <&mo>, <&to_layer_0>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
    };
};

/ {
    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt ESC Q           &kp W            &kp E           &kp R    &kp T                       &kp Y         &kp U        &kp I            &kp O          &kp P
&mt LEFT_CONTROL A  &kp S            &kp D           &kp F    &kp G                       &kp H         &kp J        &kp K            &kp L          &kp ENTER
&lt 1 Z             &kp X            &kp C           &kp V    &kp B                       &kp LEFT_ALT  &kp RGUI     &kp N            &kp M          &mkp LCLK
&mkp RCLK           &kp RIGHT_SHIFT  &kp LEFT_SHIFT  &kp TAB  &mt LEFT_COMMAND LG(SPACE)  &lt 2 SPACE   &lt 4 SPACE  &lt 3 BACKSPACE  &kp RIGHT_ALT  &lt 5 ESCAPE
            >;
        };

        layer_1 {
            bindings = <
&kp GRAVE     &kp EXCLAMATION       &kp AT_SIGN           &kp HASH        &kp DOLLAR    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH     &kp MINUS          &kp EQUAL
&kp RC(TAB)   &kp PERCENT           &kp CARET             &kp AMPERSAND   &kp ASTERISK  &kp SEMICOLON         &kp SQT                &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans
&trans        &kp LG(LS(NUMBER_3))  &kp LG(LS(NUMBER_4))  &kp LG(LS(N5))  &none         &trans                &kp LESS_THAN          &kp GREATER_THAN  &kp COMMA          &kp PERIOD
&kp QUESTION  &trans                &trans                &trans          &trans        &trans                &trans                 &trans            &trans             &trans
            >;
        };

        layer_2 {
            bindings = <
&kp F1        &kp F2   &kp F3   &kp F4   &kp F5   &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_SLASH     &none
&kp F6        &kp F7   &kp F8   &kp F9   &kp F9   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_ASTERISK  &trans
&kp F11       &kp F12  &kp F13  &kp F14  &kp F15  &trans           &kp KP_DOT       &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9
&kp KP_MINUS  &none    &trans   &trans   &trans   &trans           &trans           &kp KP_NUMBER_0  &kp KP_PLUS      &trans
            >;
        };

        layer_3 {
            bindings = <
&trans               &trans      &trans  &trans  &trans  &kp LC(UP_ARROW)        &kp LC(LEFT)    &kp UP_ARROW    &kp LC(RIGHT)       &kp LS(LC(SPACE))
&trans               &trans      &trans  &trans  &trans  &kp LA(LG(LEFT_ARROW))  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW     &kp LA(LG(RIGHT_ARROW))
&trans               &trans      &trans  &trans  &trans  &trans                  &trans          &kp C_PREV      &kp LG(LEFT_ARROW)  &kp LC(DOWN_ARROW)
&kp LG(RIGHT_ARROW)  &kp C_NEXT  &trans  &trans  &trans  &trans                  &trans          &trans          &trans              &kp LG(DELETE)
            >;
        };

        layer_4 {
            bindings = <
&trans                &trans             &trans  &trans  &trans  &paste_reserch    &kp LG(W)         &kp LG(R)        &kp LG(T)             &kp LG(Y)
&trans                &trans             &trans  &trans  &trans  &msc MOVE_Y(-20)  &kp LG(C)         &kp LG(V)        &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP
&trans                &trans             &trans  &trans  &trans  &trans            &kp C_PLAY_PAUSE  &msc MOVE_Y(20)  &kp LESS_THAN         &kp GREATER_THAN
&kp C_BRIGHTNESS_DEC  &kp C_VOLUME_DOWN  &trans  &trans  &trans  &trans            &trans            &trans           &trans                &trans
            >;
        };

        layer_5 {
            bindings = <
&trans          &trans      &trans  &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans          &trans      &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans
&trans          &trans      &trans  &trans  &trans  &trans        &bootloader   &trans        &trans        &trans
&bt BT_CLR_ALL  &bt BT_CLR  &trans  &trans  &trans  &trans        &trans        &trans        &trans        &none
            >;
        };
    };
};
