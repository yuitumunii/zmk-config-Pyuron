#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        scroll {
            bindings = <&none>;
            key-positions = <29 30>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    lt_to_layer_0: lt_to_layer_0 {
        compatible = "zmk,behavior-hold-tap";
        label = "LAYER_TAP_TO_0";
        bindings = <&mo>, <&to_layer_0>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
    };
};

/ {
    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W                     &kp E         &kp R       &kp T                       &kp Y        &kp U            &kp I              &kp O            &kp P
&mt LCTRL A       &kp S                     &kp D         &kp F       &kp G                       &kp H        &kp J            &kp K              &kp L            &mt ENTER RCTRL
&mt LEFT_SHIFT Z  &kp X                     &kp C         &kp V       &kp B                       &lt 2 TAB    &kp LALT         &kp N              &kp M            &mkp LCLK
&mkp RCLK         &mt QUESTION RIGHT_SHIFT  &kp LEFT_ALT  &kp LSHIFT  &mt LEFT_COMMAND LG(SPACE)  &lt 1 SPACE  &lt 3 BACKSPACE  &kp RIGHT_COMMAND  &kp RIGHT_SHIFT  &lt 4 ESCAPE
            >;
        };

        layer_1 {
            bindings = <
&kp EXCLAMATION       &kp AT_SIGN           &kp POUND          &kp DOLLAR       &kp PERCENT  &kp CARET         &kp AMPERSAND      &kp ASTERISK      &kp LPAR   &kp RIGHT_PARENTHESIS
&kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH     &kp MINUS  &kp EQUAL
&kp LS(LG(NUMBER_3))  &kp LG(LS(NUMBER_4))  &kp LG(LS(N5))     &none            &none        &trans            &kp LESS_THAN      &kp GREATER_THAN  &kp COLON  &kp SEMICOLON
&kp DOUBLE_QUOTES     &kp SQT               &trans             &trans           &trans       &trans            &trans             &trans            &kp SLASH  &kp PIPE
            >;
        };

        layer_2 {
            bindings = <
&kp F1        &kp F2   &kp F3   &kp F4   &kp F5   &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_SLASH     &none
&kp F6        &kp F7   &kp F8   &kp F9   &kp F9   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_ASTERISK  &trans
&kp F11       &kp F12  &kp F13  &kp F14  &kp F15  &trans           &kp KP_DOT       &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9
&kp KP_MINUS  &none    &trans   &trans   &trans   &trans           &trans           &kp KP_NUMBER_0  &kp KP_PLUS      &trans
            >;
        };

        layer_3 {
            bindings = <
&trans         &trans      &trans  &trans  &trans  &kp LC(UP_ARROW)  &kp LC(LEFT)  &kp UP_ARROW  &kp LA(RIGHT)  &kp LA(DOWN)
&trans         &trans      &trans  &trans  &trans  &kp C_AC_HOME     &kp LEFT      &kp DOWN      &kp RIGHT      &kp END
&trans         &trans      &trans  &trans  &trans  &trans            &trans        &kp C_PREV    &kp LG(LEFT)   &trans
&kp LG(RIGHT)  &kp C_NEXT  &trans  &trans  &trans  &trans            &trans        &trans        &trans         &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans      &trans  &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans      &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans
&trans  &trans      &trans  &trans  &trans  &trans        &bootloader   &trans        &trans        &trans
&trans  &bt BT_CLR  &trans  &trans  &trans  &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
            >;
        };
    };
};
